// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type AuthMutation struct {
	SignUp         *SignUpResponse         `json:"signUp"`
	PasswordUpdate *PasswordUpdateResponse `json:"passwordUpdate"`
}

type AuthQuery struct {
	SignIn  *SignInResponse  `json:"signIn"`
	SignOut *SignOutResponse `json:"signOut"`
	Profile *User            `json:"profile"`
}

type Covers struct {
	FloorSmall    *Image `json:"floor_small"`
	MainLittle    *Image `json:"main_little"`
	MainBig       *Image `json:"main_big"`
	FloorMedium   *Image `json:"floor_medium"`
	FloorWide     *Image `json:"floor_wide"`
	FloorLarge    *Image `json:"floor_large"`
	FloorSmallest *Image `json:"floor_smallest"`
	FloorWidest   *Image `json:"floor_widest"`
	BackgroundBig *Image `json:"background_big"`
}

type CursorIn struct {
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	Cursor string `json:"cursor"`
}

type CursorOut struct {
	Count  int    `json:"count"`
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	IsEnd  bool   `json:"isEnd"`
	Cursor string `json:"cursor"`
}

type Game struct {
	ID          string     `json:"id"`
	Title       string     `json:"title"`
	Summary     string     `json:"summary"`
	Description string     `json:"description"`
	Publisher   *Publisher `json:"publisher"`
	Covers      *Covers    `json:"covers"`
	Screenshots []*Image   `json:"screenshots"`
	Tags        []*Tag     `json:"tags"`
	Genre       Genres     `json:"genre"`
	Rating      int        `json:"rating"`
}

type Image struct {
	URL string `json:"url"`
}

type PasswordUpdateResponse struct {
	Status AuthenticatedRequestStatus `json:"status"`
}

type Publisher struct {
	Title string `json:"title"`
}

type SignInResponse struct {
	Status RequestStatus `json:"status"`
	Token  string        `json:"token"`
}

type SignOutResponse struct {
	Status AuthenticatedRequestStatus `json:"status"`
}

type SignUpResponse struct {
	Message string               `json:"message"`
	Status  SignUpResponseStatus `json:"status"`
}

type StoreQuery struct {
	Games []*Game `json:"games"`
}

type Tag struct {
	Name *string  `json:"name"`
	Type *TagType `json:"type"`
}

type User struct {
	ID        int    `json:"id"`
	Status    string `json:"status"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Language  string `json:"language"`
}

type AuthenticatedRequestStatus string

const (
	AuthenticatedRequestStatusOk                  AuthenticatedRequestStatus = "OK"
	AuthenticatedRequestStatusForbidden           AuthenticatedRequestStatus = "FORBIDDEN"
	AuthenticatedRequestStatusNotFound            AuthenticatedRequestStatus = "NOT_FOUND"
	AuthenticatedRequestStatusBadRequest          AuthenticatedRequestStatus = "BAD_REQUEST"
	AuthenticatedRequestStatusServerInternalError AuthenticatedRequestStatus = "SERVER_INTERNAL_ERROR"
)

var AllAuthenticatedRequestStatus = []AuthenticatedRequestStatus{
	AuthenticatedRequestStatusOk,
	AuthenticatedRequestStatusForbidden,
	AuthenticatedRequestStatusNotFound,
	AuthenticatedRequestStatusBadRequest,
	AuthenticatedRequestStatusServerInternalError,
}

func (e AuthenticatedRequestStatus) IsValid() bool {
	switch e {
	case AuthenticatedRequestStatusOk, AuthenticatedRequestStatusForbidden, AuthenticatedRequestStatusNotFound, AuthenticatedRequestStatusBadRequest, AuthenticatedRequestStatusServerInternalError:
		return true
	}
	return false
}

func (e AuthenticatedRequestStatus) String() string {
	return string(e)
}

func (e *AuthenticatedRequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthenticatedRequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthenticatedRequestStatus", str)
	}
	return nil
}

func (e AuthenticatedRequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Genres string

const (
	GenresBoard     Genres = "Board"
	GenresCards     Genres = "Cards"
	GenresCasino    Genres = "Casino"
	GenresFarm      Genres = "Farm"
	GenresRacing    Genres = "Racing"
	GenresShooter   Genres = "Shooter"
	GenresFindItems Genres = "FindItems"
	GenresPuzzle    Genres = "Puzzle"
	GenresRpg       Genres = "RPG"
	GenresSimulator Genres = "Simulator"
	GenresStrategy  Genres = "Strategy"
)

var AllGenres = []Genres{
	GenresBoard,
	GenresCards,
	GenresCasino,
	GenresFarm,
	GenresRacing,
	GenresShooter,
	GenresFindItems,
	GenresPuzzle,
	GenresRpg,
	GenresSimulator,
	GenresStrategy,
}

func (e Genres) IsValid() bool {
	switch e {
	case GenresBoard, GenresCards, GenresCasino, GenresFarm, GenresRacing, GenresShooter, GenresFindItems, GenresPuzzle, GenresRpg, GenresSimulator, GenresStrategy:
		return true
	}
	return false
}

func (e Genres) String() string {
	return string(e)
}

func (e *Genres) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Genres(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Genres", str)
	}
	return nil
}

func (e Genres) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderIn string

const (
	OrderInAsc  OrderIn = "ASC"
	OrderInDesc OrderIn = "DESC"
)

var AllOrderIn = []OrderIn{
	OrderInAsc,
	OrderInDesc,
}

func (e OrderIn) IsValid() bool {
	switch e {
	case OrderInAsc, OrderInDesc:
		return true
	}
	return false
}

func (e OrderIn) String() string {
	return string(e)
}

func (e *OrderIn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderIn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderIn", str)
	}
	return nil
}

func (e OrderIn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestStatus string

const (
	RequestStatusOk                  RequestStatus = "OK"
	RequestStatusForbidden           RequestStatus = "FORBIDDEN"
	RequestStatusNotFound            RequestStatus = "NOT_FOUND"
	RequestStatusBadRequest          RequestStatus = "BAD_REQUEST"
	RequestStatusServerInternalError RequestStatus = "SERVER_INTERNAL_ERROR"
)

var AllRequestStatus = []RequestStatus{
	RequestStatusOk,
	RequestStatusForbidden,
	RequestStatusNotFound,
	RequestStatusBadRequest,
	RequestStatusServerInternalError,
}

func (e RequestStatus) IsValid() bool {
	switch e {
	case RequestStatusOk, RequestStatusForbidden, RequestStatusNotFound, RequestStatusBadRequest, RequestStatusServerInternalError:
		return true
	}
	return false
}

func (e RequestStatus) String() string {
	return string(e)
}

func (e *RequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestStatus", str)
	}
	return nil
}

func (e RequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleEnum string

const (
	RoleEnumAdmin RoleEnum = "ADMIN"
	RoleEnumUser  RoleEnum = "USER"
)

var AllRoleEnum = []RoleEnum{
	RoleEnumAdmin,
	RoleEnumUser,
}

func (e RoleEnum) IsValid() bool {
	switch e {
	case RoleEnumAdmin, RoleEnumUser:
		return true
	}
	return false
}

func (e RoleEnum) String() string {
	return string(e)
}

func (e *RoleEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleEnum", str)
	}
	return nil
}

func (e RoleEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SignUpResponseStatus string

const (
	SignUpResponseStatusOk                  SignUpResponseStatus = "OK"
	SignUpResponseStatusBadRequest          SignUpResponseStatus = "BAD_REQUEST"
	SignUpResponseStatusServerInternalError SignUpResponseStatus = "SERVER_INTERNAL_ERROR"
	SignUpResponseStatusUserExists          SignUpResponseStatus = "USER_EXISTS"
)

var AllSignUpResponseStatus = []SignUpResponseStatus{
	SignUpResponseStatusOk,
	SignUpResponseStatusBadRequest,
	SignUpResponseStatusServerInternalError,
	SignUpResponseStatusUserExists,
}

func (e SignUpResponseStatus) IsValid() bool {
	switch e {
	case SignUpResponseStatusOk, SignUpResponseStatusBadRequest, SignUpResponseStatusServerInternalError, SignUpResponseStatusUserExists:
		return true
	}
	return false
}

func (e SignUpResponseStatus) String() string {
	return string(e)
}

func (e *SignUpResponseStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SignUpResponseStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SignUpResponseStatus", str)
	}
	return nil
}

func (e SignUpResponseStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagType string

const (
	TagTypeGenre  TagType = "genre"
	TagTypeCommon TagType = "common"
)

var AllTagType = []TagType{
	TagTypeGenre,
	TagTypeCommon,
}

func (e TagType) IsValid() bool {
	switch e {
	case TagTypeGenre, TagTypeCommon:
		return true
	}
	return false
}

func (e TagType) String() string {
	return string(e)
}

func (e *TagType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagType", str)
	}
	return nil
}

func (e TagType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
